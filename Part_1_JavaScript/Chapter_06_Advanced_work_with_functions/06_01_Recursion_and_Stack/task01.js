// Напишите функцию sumTo(n),
// которая вычисляет сумму чисел 1 + 2 + ... + n.

//   Например:

// sumTo(1) = 1
// sumTo(2) = 2 + 1 = 3
// sumTo(3) = 3 + 2 + 1 = 6
// sumTo(4) = 4 + 3 + 2 + 1 = 10
// ...
// sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050

// Сделайте три варианта решения:

// С использованием цикла.
// Через рекурсию, т.к. sumTo(n) = n + sumTo(n - 1) for n > 1.
// С использованием формулы арифметической прогрессии.

// P.S.Какой вариант решения самый быстрый ? Самый медленный ? Почему ?

//   P.P.S.Можно ли при помощи рекурсии посчитать sumTo(100000) ?


// 1) С использованием цикла

function sumTo1(n) {
  sum = 0;
  for (let i = 1; i <= n; i++) {
    sum += i;
  }
  return sum;
}

let start1 = Date.now();
console.log(sumTo1(100)); // 5050 
console.log('Время выполнения с использованием цикла', Date.now() - start1, 'ms');
// время выполнения: до 1 мс в браузере; 5+/-1 мс — в Node


// 2) Через рекурсию

function sumTo2(n) {
  return (n == 1) ? 1 : n + sumTo2(n - 1);
}

let start2 = Date.now();
console.log(sumTo2(100)); // 5050 
console.log('Время выполнения через рекурсию', Date.now() - start2, 'ms');
// время выполнения: 0 мс в браузере; до 1 мс — в Node


// 3) С использованием формулы арифметической прогрессии.

function sumTo3(n) {
  return (1 + n) * n / 2;
}

let start3 = Date.now();
console.log(sumTo3(100)); // 5050 
console.log('Время выполнения с использованием формулы арифметической прогрессии', Date.now() - start3, 'ms');
// время выполнения: до 1 мс в браузере; до 1 мс — в Node

// Нельзя при помощи рекурсии посчитать sumTo(100000): (переполнение стека)
// Uncaught RangeError: Maximum call stack size exceeded
