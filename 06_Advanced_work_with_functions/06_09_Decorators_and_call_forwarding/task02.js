/* 
Создайте декоратор delay(f, ms), к
оторый задерживает каждый вызов f на ms миллисекунд. 

Например:

function f(x) {
  alert(x);
}

// создаём обёртки
let f1000 = delay(f, 1000);
let f1500 = delay(f, 1500);

f1000("test"); // показывает "test" после 1000 мс
f1500("test"); // показывает "test" после 1500 мс

Другими словами, delay(f, ms) возвращает вариант f с «задержкой на ms мс».

В приведённом выше коде f – функция с одним аргументом, 
но ваше решение должно передавать все аргументы и контекст this.

*/

function delay(f, ms) {

  function wrapper(...args) {         // обёртка со всеми аргументами

    setTimeout(() => {

      return f.apply(this, args);    // возвращаем начальную функцию с задержкой

    }, ms);

  }

  return wrapper;

}

function f(x) {
  console.log(x);
}

// создаём обёртки
let f1000 = delay(f, 1000);
let f2000 = delay(f, 2000);

f1000("test"); // показывает "test" после 1000 мс
f2000("test2"); // показывает "test" после 2000 мс
